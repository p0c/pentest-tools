#
# notify_pushover.rb by <poc@secure.cat> based on growl and twitter plug-ins by Carlos Perez <carlos_perez[at]darkoperator.com>
#
# Metasploit plug-in to notify new/closed sessions to mobile devices through pushover (https://pushover.net)
#
# Thxs to:
# 	Carlos Perez <carlos_perez[at]darkoperator.com> for the original growl and twitter notification plug-ins
# 	<st3@funoverip.net> for the notify_mail plug-in
#
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without modification, are permitted
# provided that the following conditions are met:
#
# Redistributions of source code must retain the above copyright notice, this list of conditions and
# the following disclaimer.
#
# Redistributions in binary form must reproduce the above copyright notice, this list of conditions
# and the following disclaimer in the documentation and/or other materials provided with the
# distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR
# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER
# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

require 'net/https'
module Msf

	class Plugin::NotifyPushover < Msf::Plugin
		include Msf::SessionEvent

		# Checks if the constant is already set, if not it is set
		if not defined?(Notify_pushover_yaml)
			Notify_pushover_yaml = "#{Msf::Config.get_config_root}/notify_pushover.yaml"
		end

		# Initialize the Class
		def initialize(framework, opts)
			super
			add_console_dispatcher(NotifyPushoverCommandDispatcher)
		end

		# Cleans up the event subscriber on unload
		def cleanup
			self.framework.events.remove_session_subscriber(self)
			remove_console_dispatcher('notify_pushover')
		end

		# Sets the name of the plug-in
		def name
			"notify_pushover"
		end

		# Sets the description of the plug-in
		def desc
			"Automatically send pushover notifications when sessions are created and closed"
		end

		# NotifyPushover Command Dispatcher Class
		class NotifyPushoverCommandDispatcher
			include Msf::Ui::Console::CommandDispatcher

			@app_key =  nil
			@user_key =  nil

			# Action for when a session is created
			def on_session_open(session)
				#print_status("Session received sending pushover notification to #{@user_key}")
				pushover_notify("Session opened: #{session.sid} IP: #{session.session_host} Peer: #{session.tunnel_peer} Platform: #{session.platform} Type: #{session.type}")
				return
			end

			# Action for when the session is closed
			def on_session_close(session,reason = "")
				#print_status("Session closed sending pushover notification to #{@user_key}")
				pushover_notify("Session closed: #{session.sid} Type: #{session.type} Reason: #{reason}")
				return
			end

			# Name of the plug-in
			def name
				"notify_pushover"
			end

			# Method for sending the direct message
			def pushover_notify(message)
				@pushover_req.set_form_data({
					:token => @app_key,
					:user => @user_key,
					:message => message
				})
				@pushover_res.start {|http| http.request(@pushover_req) }
			end

			# Reads and set the valued from a YAML File
			def read_settings
				read = nil
				if File.exist?("#{Notify_pushover_yaml}")
					ldconfig = YAML.load_file("#{Notify_pushover_yaml}")
					@app_key = ldconfig['app_key']
					@user_key = ldconfig['user_key']
					read = true
				else
					print_error("You must create a YAML File with the options")
					print_error("as: #{Notify_pushover_yaml}")
					return read
				end
				return read
			end

			# Sets the commands for the plug-in
			def commands
				{
					'notify_pushover_help'					=> "Displays help",
					'notify_pushover_start'					=> "Start notify_pushoverer plugin after saving settings.",
					'notify_pushover_stop'					=> "Stop notifying for new sessions.",
					'notify_pushover_test'					=> "Send test message to make sure configuration is working.",
					'notify_pushover_save'					=> "Save Settings to YAML File #{Notify_pushover_yaml}.",
					'notify_pushover_set_app_key'			=> "Sets pushover app API key.",
					'notify_pushover_set_user_key'	  		=> "Sets pushover user(s) key.",
					'notify_pushover_show_parms'			=> "Shows currently set parameters."
				}
			end

			# Help Command
			def cmd_notify_pushover_help
				puts "Help"
			end

			# Re-Read YAML file and set Pushover Configuration
			def cmd_notify_pushover_start
				print_status "Starting to notify sessions through pushover"
				if read_settings()
					self.framework.events.add_session_subscriber(self)
					@pushover_url = URI.parse("https://api.pushover.net/1/messages.json")
					@pushover_req = Net::HTTP::Post.new(@pushover_url.path)
					@pushover_req.set_form_data({
					  :token => @app_key,
					  :user => @user_key,
					  :message => ""
					})
					@pushover_res = Net::HTTP.new(@pushover_url.host, @pushover_url.port)
					@pushover_res.use_ssl = true
					@pushover_res.verify_mode = OpenSSL::SSL::VERIFY_PEER
					print_good("Pushover plugin started: monitoring sessions")
				else
					print_error("Could not set pushover settings.")
				end
			end

			def cmd_notify_pushover_stop
				print_status("Stopping pushover session notifications")
				self.framework.events.remove_session_subscriber(self)
			end

			def cmd_notify_pushover_test
				print_status("Sending test message to: #{@user_key}")
				read_settings
				@pushover_url = URI.parse("https://api.pushover.net/1/messages.json")
				@pushover_req = Net::HTTP::Post.new(@pushover_url.path)
				@pushover_req.set_form_data({
				  :token => @app_key,
				  :user => @user_key,
				  :message => ""
				})
				@pushover_res = Net::HTTP.new(@pushover_url.host, @pushover_url.port)
				@pushover_res.use_ssl = true
				@pushover_res.verify_mode = OpenSSL::SSL::VERIFY_PEER
				#@pushover_res.start {|http| http.request(@pushover_req) }
				pushover_notify("This is a test message from your msfconsole #{::Time.now}")
				return
			end

			# Save parameters to text file
			def cmd_notify_pushover_save
				print_status("Saving parameters to config file")
				if @app_key and @user_key
					config = {'app_key' => @app_key, 'user_key' => @user_key}
					File.open(Notify_pushover_yaml, 'w') do |out|
						YAML.dump(config, out)
					end
					print_good("All parameters saved to #{Notify_pushover_yaml}")
				else
					print_error("You have not provided all the parameters!")
				end
			end

			# Set pushover app API key
			def cmd_notify_pushover_set_app_key(*args)
				if args.length > 0
					print_status("Setting pushover app API key to #{args[0]}")
					@app_key = args[0]
				else
					print_error("Please provide a value")
				end
			end

			# Set pushover user(s) key
			def cmd_notify_pushover_set_user_key(*args)
				if args.length > 0
					print_status("Setting pushover user(s) key to #{args[0]}")
					@user_key = args[0]
				else
					print_error("Please provide a value")
				end
			end

			# Show the parameters set on the plug-in
			def cmd_notify_pushover_show_parms
				print_status("Parameters:")
				print_good("app_key: #{@app_key}")
				print_good("user_key: #{@user_key}")
			end
		end

	end
end

