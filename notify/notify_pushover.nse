-- The Head Section --
description = [[
Notifies mobile devices through pushover service when a scan finishes.
]]

---
-- @usage
-- nmap --script notify_pushover [--script-args app_key=<PUSHOVER APP API KEY> user_key=<PUSHOVER USER KEY>] <target>
-- @args app_key The app API key used to send notifications through pushover (required).
-- @args user_key The pushover user key receiving the notifications (required).

author = "poc@secure.cat"

license = "Same as Nmap--See http://nmap.org/book/man-legal.html"

categories = {"external"}

local stdnse = require "stdnse"
local http = require "http"

local arg_app_key = stdnse.get_script_args("app_key")
local arg_user_key = stdnse.get_script_args("user_key")

-- The Rule Section --
postrule = function() return true end
hostrule = function(host) return true end

-- The Action Section --
local function fail(err) return ("\n  ERROR: %s"):format(err or "") end

hostaction = function(host)

    local h = host.targetname

    if h == nil then h = host.ip end

    if nmap.registry.pushover == nil then
            nmap.registry.pushover = h
    else
        nmap.registry.pushover = nmap.registry.pushover .. ", " .. h
    end

    return true
end

postaction = function()
    local notify_message = "Scan finished: "
    
    if nmap.registry.pushover ~= nil then
        notify_message = notify_message..nmap.registry.pushover
    end

    if ( not(arg_app_key) or not(arg_user_key) ) then
        return fail("Pushover app API key and user key required in order to use this script (see description)")
    end

    http.post("api.pushover.net", 443, "/1/messages.json", nil, nil, {
                                       token   = arg_app_key, -- Your application token
                                       user    = arg_user_key, -- Your user token
                                       title   = "nmap",
                                       message = notify_message
                                    })

    return true
end

local Actions = {
  hostrule = hostaction,
  postrule = postaction
}

-- execute the action function corresponding to the current rule
action = function(...) return Actions[SCRIPT_TYPE](...) end