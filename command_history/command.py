#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# regex
import re
# date and time
from datetime import datetime, date, time
# csv (save command history)
import csv
# base64 encoding / decoding
import base64

#-----------------------------------------------------------------------------
# Base class for all commands.
class Command(object):
    """
    Represents a command as a command_line, command_output and date.
    """

    def __init__(self, command_line=None, command_date=None, 
                 command_output=None):
        """
        Initializes a new command.
        """
        self.command_line = command_line
        self.command_date = command_date
        self.command_output = command_output

    def __repr__(self):
        return '"%s","%s","%s"' % (self.command_date, self.command_line, 
                                 self.command_output.encode('unicode-escape'))

    def __csv__(self):
        """
        Returns a sequence, useful for csv representation.
        """
        return [self.command_date, self.command_line, 
                self.command_output.encode('unicode-escape')]

#-----------------------------------------------------------------------------
def get_command_history(logfile=None):
    """
    Reads a log file ('script' command output) and returns a list of commands.
    """

    # XXX add auto PROMPT detection XXX
    PROMPT_START = '\/[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}\/'
    PROMPT_CHARACTER = 'Â»'

    command_date = ''
    command_line = ''
    command_output = ''
    command_history = []

    print('[*] Loading command_history from logfile...')

    if logfile is None:
        logfile = input('[?] Enter logfile location: ')

    # XXX add encode check XXX
    with open(logfile, encoding='iso-8859-1') as log:
        for line in log:
            #check if line starts with first line of PROMPT
            if re.match(PROMPT_START,line) is not None:
                # save date and time (finish = next prompt date and time)
                command_date = datetime.strptime(re.search(PROMPT_START,line)
                                            .group(0), '/%Y-%m-%d %H:%M:%S/')
            # check if line starts with PROMPT_CHARACTER
            elif re.match(PROMPT_CHARACTER,line) is not None:
                # save previous command
                if (command_line is not ''):
                    command = Command(command_line, command_date, 
                                      command_output)
                    command_history.append(command)
                    command_line = ''
                    command_output = ''
                # new command line
                command_line = line.replace(PROMPT_CHARACTER,'').strip()
            else:
                # command output
                if command_line is not '':
                    command_output += line

    command = Command(command_line, command_date, command_output)
    command_history.append(command)

    print('[+] Successfully loaded ' + str(command_history.__len__()) + 
          ' commands')

    return command_history

#-----------------------------------------------------------------------------
def print_command_history(command_history):
    """
    Prints command_history.
    """
    for c in command_history:
        print('===========================================================\n')
        print('Command: \n ' + c.command_line + '\n')
        print('Date: \n ' + str(c.command_date) + '\n')
        print('Output:\n' + c.command_output + '\n')

#-----------------------------------------------------------------------------
def command_history_to_csv(command_history, csv_file):
    """
    Saves command_history to csv_file in csv format.
    """
    command_history_fields = ['datetime', 'command_line', 'command_output']
    wr = csv.writer(open(csv_file, 'w', newline=''), quoting=csv.QUOTE_ALL)
    wr.writerow(command_history_fields)
    for c in command_history:
        wr.writerow(c.__csv__())

#-----------------------------------------------------------------------------
def command_search(command_history, pattern):
    """
    Returns a new command_history only with commands matching pattern in
    command_line atribute.
    """
    print('[*] Searching for pattern "' + pattern + '" in command history...')
    search_result = []
    for c in command_history:
        if re.search(pattern, c.command_line):
            search_result.append(c)
    result_len = search_result.__len__()
    if result_len > 0:
        print('[+] Found ' + str(result_len) + ' command/s that match pattern'
                                               ' "' + pattern + '"')
    else:
        print('[*] No commands found for pattern "' + pattern + '"')
    return search_result

#-----------------------------------------------------------------------------
# Testing
command_history = get_command_history('log.clean')
nmap_command = command_search(command_history, 'nmap')
#print_command_history(nmap_command)
command_history_to_csv(command_history, 'command_history.csv')
command_history_to_csv(nmap_command, 'command_history_nmap.csv')

